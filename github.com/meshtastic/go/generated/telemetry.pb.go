// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: meshtastic/telemetry.proto

package generated

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//
// Supported I2C Sensors for telemetry in Meshtastic
type TelemetrySensorType int32

const (
	//
	// No external telemetry sensor explicitly set
	TelemetrySensorType_SENSOR_UNSET TelemetrySensorType = 0
	//
	// High accuracy temperature, pressure, humidity
	TelemetrySensorType_BME280 TelemetrySensorType = 1
	//
	// High accuracy temperature, pressure, humidity, and air resistance
	TelemetrySensorType_BME680 TelemetrySensorType = 2
	//
	// Very high accuracy temperature
	TelemetrySensorType_MCP9808 TelemetrySensorType = 3
	//
	// Moderate accuracy current and voltage
	TelemetrySensorType_INA260 TelemetrySensorType = 4
	//
	// Moderate accuracy current and voltage
	TelemetrySensorType_INA219 TelemetrySensorType = 5
	//
	// High accuracy temperature and pressure
	TelemetrySensorType_BMP280 TelemetrySensorType = 6
	//
	// High accuracy temperature and humidity
	TelemetrySensorType_SHTC3 TelemetrySensorType = 7
	//
	// High accuracy pressure
	TelemetrySensorType_LPS22 TelemetrySensorType = 8
	//
	// 3-Axis magnetic sensor
	TelemetrySensorType_QMC6310 TelemetrySensorType = 9
	//
	// 6-Axis inertial measurement sensor
	TelemetrySensorType_QMI8658 TelemetrySensorType = 10
	//
	// 3-Axis magnetic sensor
	TelemetrySensorType_QMC5883L TelemetrySensorType = 11
	//
	// High accuracy temperature and humidity
	TelemetrySensorType_SHT31 TelemetrySensorType = 12
	//
	// PM2.5 air quality sensor
	TelemetrySensorType_PMSA003I TelemetrySensorType = 13
)

// Enum value maps for TelemetrySensorType.
var (
	TelemetrySensorType_name = map[int32]string{
		0:  "SENSOR_UNSET",
		1:  "BME280",
		2:  "BME680",
		3:  "MCP9808",
		4:  "INA260",
		5:  "INA219",
		6:  "BMP280",
		7:  "SHTC3",
		8:  "LPS22",
		9:  "QMC6310",
		10: "QMI8658",
		11: "QMC5883L",
		12: "SHT31",
		13: "PMSA003I",
	}
	TelemetrySensorType_value = map[string]int32{
		"SENSOR_UNSET": 0,
		"BME280":       1,
		"BME680":       2,
		"MCP9808":      3,
		"INA260":       4,
		"INA219":       5,
		"BMP280":       6,
		"SHTC3":        7,
		"LPS22":        8,
		"QMC6310":      9,
		"QMI8658":      10,
		"QMC5883L":     11,
		"SHT31":        12,
		"PMSA003I":     13,
	}
)

func (x TelemetrySensorType) Enum() *TelemetrySensorType {
	p := new(TelemetrySensorType)
	*p = x
	return p
}

func (x TelemetrySensorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TelemetrySensorType) Descriptor() protoreflect.EnumDescriptor {
	return file_meshtastic_telemetry_proto_enumTypes[0].Descriptor()
}

func (TelemetrySensorType) Type() protoreflect.EnumType {
	return &file_meshtastic_telemetry_proto_enumTypes[0]
}

func (x TelemetrySensorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TelemetrySensorType.Descriptor instead.
func (TelemetrySensorType) EnumDescriptor() ([]byte, []int) {
	return file_meshtastic_telemetry_proto_rawDescGZIP(), []int{0}
}

//
// Key native device metrics such as battery level
type DeviceMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// 0-100 (>100 means powered)
	BatteryLevel uint32 `protobuf:"varint,1,opt,name=battery_level,json=batteryLevel,proto3" json:"battery_level,omitempty"`
	//
	// Voltage measured
	Voltage float32 `protobuf:"fixed32,2,opt,name=voltage,proto3" json:"voltage,omitempty"`
	//
	// Utilization for the current channel, including well formed TX, RX and malformed RX (aka noise).
	ChannelUtilization float32 `protobuf:"fixed32,3,opt,name=channel_utilization,json=channelUtilization,proto3" json:"channel_utilization,omitempty"`
	//
	// Percent of airtime for transmission used within the last hour.
	AirUtilTx float32 `protobuf:"fixed32,4,opt,name=air_util_tx,json=airUtilTx,proto3" json:"air_util_tx,omitempty"`
}

func (x *DeviceMetrics) Reset() {
	*x = DeviceMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meshtastic_telemetry_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceMetrics) ProtoMessage() {}

func (x *DeviceMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_telemetry_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceMetrics.ProtoReflect.Descriptor instead.
func (*DeviceMetrics) Descriptor() ([]byte, []int) {
	return file_meshtastic_telemetry_proto_rawDescGZIP(), []int{0}
}

func (x *DeviceMetrics) GetBatteryLevel() uint32 {
	if x != nil {
		return x.BatteryLevel
	}
	return 0
}

func (x *DeviceMetrics) GetVoltage() float32 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

func (x *DeviceMetrics) GetChannelUtilization() float32 {
	if x != nil {
		return x.ChannelUtilization
	}
	return 0
}

func (x *DeviceMetrics) GetAirUtilTx() float32 {
	if x != nil {
		return x.AirUtilTx
	}
	return 0
}

//
// Weather station or other environmental metrics
type EnvironmentMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// Temperature measured
	Temperature float32 `protobuf:"fixed32,1,opt,name=temperature,proto3" json:"temperature,omitempty"`
	//
	// Relative humidity percent measured
	RelativeHumidity float32 `protobuf:"fixed32,2,opt,name=relative_humidity,json=relativeHumidity,proto3" json:"relative_humidity,omitempty"`
	//
	// Barometric pressure in hPA measured
	BarometricPressure float32 `protobuf:"fixed32,3,opt,name=barometric_pressure,json=barometricPressure,proto3" json:"barometric_pressure,omitempty"`
	//
	// Gas resistance in mOhm measured
	GasResistance float32 `protobuf:"fixed32,4,opt,name=gas_resistance,json=gasResistance,proto3" json:"gas_resistance,omitempty"`
	//
	// Voltage measured
	Voltage float32 `protobuf:"fixed32,5,opt,name=voltage,proto3" json:"voltage,omitempty"`
	//
	// Current measured
	Current float32 `protobuf:"fixed32,6,opt,name=current,proto3" json:"current,omitempty"`
}

func (x *EnvironmentMetrics) Reset() {
	*x = EnvironmentMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meshtastic_telemetry_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvironmentMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentMetrics) ProtoMessage() {}

func (x *EnvironmentMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_telemetry_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentMetrics.ProtoReflect.Descriptor instead.
func (*EnvironmentMetrics) Descriptor() ([]byte, []int) {
	return file_meshtastic_telemetry_proto_rawDescGZIP(), []int{1}
}

func (x *EnvironmentMetrics) GetTemperature() float32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *EnvironmentMetrics) GetRelativeHumidity() float32 {
	if x != nil {
		return x.RelativeHumidity
	}
	return 0
}

func (x *EnvironmentMetrics) GetBarometricPressure() float32 {
	if x != nil {
		return x.BarometricPressure
	}
	return 0
}

func (x *EnvironmentMetrics) GetGasResistance() float32 {
	if x != nil {
		return x.GasResistance
	}
	return 0
}

func (x *EnvironmentMetrics) GetVoltage() float32 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

func (x *EnvironmentMetrics) GetCurrent() float32 {
	if x != nil {
		return x.Current
	}
	return 0
}

//
// Air quality metrics
type AirQualityMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// Concentration Units Standard PM1.0
	Pm10Standard uint32 `protobuf:"varint,1,opt,name=pm10_standard,json=pm10Standard,proto3" json:"pm10_standard,omitempty"`
	//
	// Concentration Units Standard PM2.5
	Pm25Standard uint32 `protobuf:"varint,2,opt,name=pm25_standard,json=pm25Standard,proto3" json:"pm25_standard,omitempty"`
	//
	// Concentration Units Standard PM10.0
	Pm100Standard uint32 `protobuf:"varint,3,opt,name=pm100_standard,json=pm100Standard,proto3" json:"pm100_standard,omitempty"`
	//
	// Concentration Units Environmental PM1.0
	Pm10Environmental uint32 `protobuf:"varint,4,opt,name=pm10_environmental,json=pm10Environmental,proto3" json:"pm10_environmental,omitempty"`
	//
	// Concentration Units Environmental PM2.5
	Pm25Environmental uint32 `protobuf:"varint,5,opt,name=pm25_environmental,json=pm25Environmental,proto3" json:"pm25_environmental,omitempty"`
	//
	// Concentration Units Environmental PM10.0
	Pm100Environmental uint32 `protobuf:"varint,6,opt,name=pm100_environmental,json=pm100Environmental,proto3" json:"pm100_environmental,omitempty"`
	//
	// 0.3um Particle Count
	Particles_03Um uint32 `protobuf:"varint,7,opt,name=particles_03um,json=particles03um,proto3" json:"particles_03um,omitempty"`
	//
	// 0.5um Particle Count
	Particles_05Um uint32 `protobuf:"varint,8,opt,name=particles_05um,json=particles05um,proto3" json:"particles_05um,omitempty"`
	//
	// 1.0um Particle Count
	Particles_10Um uint32 `protobuf:"varint,9,opt,name=particles_10um,json=particles10um,proto3" json:"particles_10um,omitempty"`
	//
	// 2.5um Particle Count
	Particles_25Um uint32 `protobuf:"varint,10,opt,name=particles_25um,json=particles25um,proto3" json:"particles_25um,omitempty"`
	//
	// 5.0um Particle Count
	Particles_50Um uint32 `protobuf:"varint,11,opt,name=particles_50um,json=particles50um,proto3" json:"particles_50um,omitempty"`
	//
	// 10.0um Particle Count
	Particles_100Um uint32 `protobuf:"varint,12,opt,name=particles_100um,json=particles100um,proto3" json:"particles_100um,omitempty"`
}

func (x *AirQualityMetrics) Reset() {
	*x = AirQualityMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meshtastic_telemetry_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AirQualityMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirQualityMetrics) ProtoMessage() {}

func (x *AirQualityMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_telemetry_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirQualityMetrics.ProtoReflect.Descriptor instead.
func (*AirQualityMetrics) Descriptor() ([]byte, []int) {
	return file_meshtastic_telemetry_proto_rawDescGZIP(), []int{2}
}

func (x *AirQualityMetrics) GetPm10Standard() uint32 {
	if x != nil {
		return x.Pm10Standard
	}
	return 0
}

func (x *AirQualityMetrics) GetPm25Standard() uint32 {
	if x != nil {
		return x.Pm25Standard
	}
	return 0
}

func (x *AirQualityMetrics) GetPm100Standard() uint32 {
	if x != nil {
		return x.Pm100Standard
	}
	return 0
}

func (x *AirQualityMetrics) GetPm10Environmental() uint32 {
	if x != nil {
		return x.Pm10Environmental
	}
	return 0
}

func (x *AirQualityMetrics) GetPm25Environmental() uint32 {
	if x != nil {
		return x.Pm25Environmental
	}
	return 0
}

func (x *AirQualityMetrics) GetPm100Environmental() uint32 {
	if x != nil {
		return x.Pm100Environmental
	}
	return 0
}

func (x *AirQualityMetrics) GetParticles_03Um() uint32 {
	if x != nil {
		return x.Particles_03Um
	}
	return 0
}

func (x *AirQualityMetrics) GetParticles_05Um() uint32 {
	if x != nil {
		return x.Particles_05Um
	}
	return 0
}

func (x *AirQualityMetrics) GetParticles_10Um() uint32 {
	if x != nil {
		return x.Particles_10Um
	}
	return 0
}

func (x *AirQualityMetrics) GetParticles_25Um() uint32 {
	if x != nil {
		return x.Particles_25Um
	}
	return 0
}

func (x *AirQualityMetrics) GetParticles_50Um() uint32 {
	if x != nil {
		return x.Particles_50Um
	}
	return 0
}

func (x *AirQualityMetrics) GetParticles_100Um() uint32 {
	if x != nil {
		return x.Particles_100Um
	}
	return 0
}

//
// Types of Measurements the telemetry module is equipped to handle
type Telemetry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// This is usually not sent over the mesh (to save space), but it is sent
	// from the phone so that the local device can set its RTC If it is sent over
	// the mesh (because there are devices on the mesh without GPS), it will only
	// be sent by devices which has a hardware GPS clock (IE Mobile Phone).
	// seconds since 1970
	Time uint32 `protobuf:"fixed32,1,opt,name=time,proto3" json:"time,omitempty"`
	// Types that are assignable to Variant:
	//
	//	*Telemetry_DeviceMetrics
	//	*Telemetry_EnvironmentMetrics
	//	*Telemetry_AirQualityMetrics
	Variant isTelemetry_Variant `protobuf_oneof:"variant"`
}

func (x *Telemetry) Reset() {
	*x = Telemetry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meshtastic_telemetry_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Telemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Telemetry) ProtoMessage() {}

func (x *Telemetry) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_telemetry_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Telemetry.ProtoReflect.Descriptor instead.
func (*Telemetry) Descriptor() ([]byte, []int) {
	return file_meshtastic_telemetry_proto_rawDescGZIP(), []int{3}
}

func (x *Telemetry) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (m *Telemetry) GetVariant() isTelemetry_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (x *Telemetry) GetDeviceMetrics() *DeviceMetrics {
	if x, ok := x.GetVariant().(*Telemetry_DeviceMetrics); ok {
		return x.DeviceMetrics
	}
	return nil
}

func (x *Telemetry) GetEnvironmentMetrics() *EnvironmentMetrics {
	if x, ok := x.GetVariant().(*Telemetry_EnvironmentMetrics); ok {
		return x.EnvironmentMetrics
	}
	return nil
}

func (x *Telemetry) GetAirQualityMetrics() *AirQualityMetrics {
	if x, ok := x.GetVariant().(*Telemetry_AirQualityMetrics); ok {
		return x.AirQualityMetrics
	}
	return nil
}

type isTelemetry_Variant interface {
	isTelemetry_Variant()
}

type Telemetry_DeviceMetrics struct {
	//
	// Key native device metrics such as battery level
	DeviceMetrics *DeviceMetrics `protobuf:"bytes,2,opt,name=device_metrics,json=deviceMetrics,proto3,oneof"`
}

type Telemetry_EnvironmentMetrics struct {
	//
	// Weather station or other environmental metrics
	EnvironmentMetrics *EnvironmentMetrics `protobuf:"bytes,3,opt,name=environment_metrics,json=environmentMetrics,proto3,oneof"`
}

type Telemetry_AirQualityMetrics struct {
	//
	// Air quality metrics
	AirQualityMetrics *AirQualityMetrics `protobuf:"bytes,4,opt,name=air_quality_metrics,json=airQualityMetrics,proto3,oneof"`
}

func (*Telemetry_DeviceMetrics) isTelemetry_Variant() {}

func (*Telemetry_EnvironmentMetrics) isTelemetry_Variant() {}

func (*Telemetry_AirQualityMetrics) isTelemetry_Variant() {}

var File_meshtastic_telemetry_proto protoreflect.FileDescriptor

var file_meshtastic_telemetry_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2f, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6d, 0x65,
	0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x22, 0x9f, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x69,
	0x72, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x5f, 0x74, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x09, 0x61, 0x69, 0x72, 0x55, 0x74, 0x69, 0x6c, 0x54, 0x78, 0x22, 0xef, 0x01, 0x0a, 0x12, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x48, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x12, 0x2f, 0x0a, 0x13, 0x62, 0x61, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x62,
	0x61, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x61, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x67, 0x61, 0x73, 0x52, 0x65,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xff, 0x03, 0x0a,
	0x11, 0x41, 0x69, 0x72, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6d, 0x31, 0x30, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x6d, 0x31, 0x30, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6d, 0x32, 0x35, 0x5f,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x70, 0x6d, 0x32, 0x35, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x6d, 0x31, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x6d, 0x31, 0x30, 0x30, 0x53, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x6d, 0x31, 0x30, 0x5f, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x70, 0x6d, 0x31, 0x30, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x6d, 0x32, 0x35, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x70, 0x6d, 0x32, 0x35, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x6d, 0x31, 0x30, 0x30, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x70, 0x6d, 0x31, 0x30, 0x30, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x5f,
	0x30, 0x33, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x73, 0x30, 0x33, 0x75, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x5f, 0x30, 0x35, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x30, 0x35, 0x75, 0x6d,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x5f, 0x31, 0x30,
	0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x73, 0x31, 0x30, 0x75, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x73, 0x5f, 0x32, 0x35, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x32, 0x35, 0x75, 0x6d, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x5f, 0x35, 0x30, 0x75, 0x6d,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x73, 0x35, 0x30, 0x75, 0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x73, 0x5f, 0x31, 0x30, 0x30, 0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x31, 0x30, 0x30, 0x75, 0x6d, 0x22, 0x92,
	0x02, 0x0a, 0x09, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x42, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x74,
	0x61, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x12, 0x51, 0x0a, 0x13, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x48, 0x00, 0x52, 0x12, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x4f, 0x0a, 0x13, 0x61, 0x69, 0x72, 0x5f, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69,
	0x63, 0x2e, 0x41, 0x69, 0x72, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x11, 0x61, 0x69, 0x72, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x2a, 0xc7, 0x01, 0x0a, 0x13, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x42, 0x4d, 0x45, 0x32, 0x38, 0x30, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x4d, 0x45,
	0x36, 0x38, 0x30, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x43, 0x50, 0x39, 0x38, 0x30, 0x38,
	0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x4e, 0x41, 0x32, 0x36, 0x30, 0x10, 0x04, 0x12, 0x0a,
	0x0a, 0x06, 0x49, 0x4e, 0x41, 0x32, 0x31, 0x39, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x4d,
	0x50, 0x32, 0x38, 0x30, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x48, 0x54, 0x43, 0x33, 0x10,
	0x07, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x50, 0x53, 0x32, 0x32, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07,
	0x51, 0x4d, 0x43, 0x36, 0x33, 0x31, 0x30, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x51, 0x4d, 0x49,
	0x38, 0x36, 0x35, 0x38, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x51, 0x4d, 0x43, 0x35, 0x38, 0x38,
	0x33, 0x4c, 0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x48, 0x54, 0x33, 0x31, 0x10, 0x0c, 0x12,
	0x0c, 0x0a, 0x08, 0x50, 0x4d, 0x53, 0x41, 0x30, 0x30, 0x33, 0x49, 0x10, 0x0d, 0x42, 0x64, 0x0a,
	0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x65, 0x65, 0x6b, 0x73, 0x76, 0x69, 0x6c, 0x6c, 0x65, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x42, 0x0f, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x5a, 0x22, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2f, 0x67, 0x6f, 0x2f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0xaa, 0x02, 0x14, 0x4d, 0x65, 0x73, 0x68,
	0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73,
	0xba, 0x02, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_meshtastic_telemetry_proto_rawDescOnce sync.Once
	file_meshtastic_telemetry_proto_rawDescData = file_meshtastic_telemetry_proto_rawDesc
)

func file_meshtastic_telemetry_proto_rawDescGZIP() []byte {
	file_meshtastic_telemetry_proto_rawDescOnce.Do(func() {
		file_meshtastic_telemetry_proto_rawDescData = protoimpl.X.CompressGZIP(file_meshtastic_telemetry_proto_rawDescData)
	})
	return file_meshtastic_telemetry_proto_rawDescData
}

var file_meshtastic_telemetry_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_meshtastic_telemetry_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_meshtastic_telemetry_proto_goTypes = []interface{}{
	(TelemetrySensorType)(0),   // 0: meshtastic.TelemetrySensorType
	(*DeviceMetrics)(nil),      // 1: meshtastic.DeviceMetrics
	(*EnvironmentMetrics)(nil), // 2: meshtastic.EnvironmentMetrics
	(*AirQualityMetrics)(nil),  // 3: meshtastic.AirQualityMetrics
	(*Telemetry)(nil),          // 4: meshtastic.Telemetry
}
var file_meshtastic_telemetry_proto_depIdxs = []int32{
	1, // 0: meshtastic.Telemetry.device_metrics:type_name -> meshtastic.DeviceMetrics
	2, // 1: meshtastic.Telemetry.environment_metrics:type_name -> meshtastic.EnvironmentMetrics
	3, // 2: meshtastic.Telemetry.air_quality_metrics:type_name -> meshtastic.AirQualityMetrics
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_meshtastic_telemetry_proto_init() }
func file_meshtastic_telemetry_proto_init() {
	if File_meshtastic_telemetry_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_meshtastic_telemetry_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meshtastic_telemetry_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvironmentMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meshtastic_telemetry_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AirQualityMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meshtastic_telemetry_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Telemetry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_meshtastic_telemetry_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Telemetry_DeviceMetrics)(nil),
		(*Telemetry_EnvironmentMetrics)(nil),
		(*Telemetry_AirQualityMetrics)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_meshtastic_telemetry_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_meshtastic_telemetry_proto_goTypes,
		DependencyIndexes: file_meshtastic_telemetry_proto_depIdxs,
		EnumInfos:         file_meshtastic_telemetry_proto_enumTypes,
		MessageInfos:      file_meshtastic_telemetry_proto_msgTypes,
	}.Build()
	File_meshtastic_telemetry_proto = out.File
	file_meshtastic_telemetry_proto_rawDesc = nil
	file_meshtastic_telemetry_proto_goTypes = nil
	file_meshtastic_telemetry_proto_depIdxs = nil
}
